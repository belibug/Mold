<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="37" errors="0" failures="8" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2024-07-08" time="12:52:10">
  <environment os-version="10.0.22631" platform="Microsoft Windows 11 Enterprise|C:\WINDOWS|\Device\Harddisk0\Partition3" nunit-version="2.5.8.0" clr-version="8.0.6" cwd="C:\Localwork\Projects\Mold" machine-name="W10L-013241" user-domain="CORP" user="HA0559" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="3.9839" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\Localwork\Projects\Mold\tests\Module.Tests.ps1" executed="True" result="Success" success="True" time="0.4887" asserts="0" description="C:\Localwork\Projects\Mold\tests\Module.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="General Module Control" executed="True" result="Success" success="True" time="0.1349" asserts="0" description="General Module Control">
            <results>
              <test-case description="Should import without errors" name="General Module Control.Should import without errors" time="0.0919" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1" executed="True" result="Failure" success="False" time="3.4893" asserts="0" description="C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="File: AutoCompleteTemplateName" executed="True" result="Success" success="True" time="0.2658" asserts="0" description="File: AutoCompleteTemplateName">
            <results>
              <test-suite type="TestFixture" name="File: AutoCompleteTemplateName.Code Quality Check" executed="True" result="Success" success="True" time="0.2569" asserts="0" description="File: AutoCompleteTemplateName.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: AutoCompleteTemplateName.Code Quality Check.is valid PowerShell Code" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: AutoCompleteTemplateName.Code Quality Check.passess ScriptAnalyzer" time="0.2267" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: Class_MOLDQ" executed="True" result="Success" success="True" time="0.3248" asserts="0" description="File: Class_MOLDQ">
            <results>
              <test-suite type="TestFixture" name="File: Class_MOLDQ.Code Quality Check" executed="True" result="Success" success="True" time="0.0514" asserts="0" description="File: Class_MOLDQ.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: Class_MOLDQ.Code Quality Check.is valid PowerShell Code" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: Class_MOLDQ.Code Quality Check.passess ScriptAnalyzer" time="0.0358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: GenerateQuetion" executed="True" result="Success" success="True" time="0.5544" asserts="0" description="File: GenerateQuetion">
            <results>
              <test-suite type="TestFixture" name="File: GenerateQuetion.Code Quality Check" executed="True" result="Success" success="True" time="0.223" asserts="0" description="File: GenerateQuetion.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: GenerateQuetion.Code Quality Check.is valid PowerShell Code" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: GenerateQuetion.Code Quality Check.passess ScriptAnalyzer" time="0.2081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: GetMoldPlaceHolders" executed="True" result="Failure" success="False" time="0.7826" asserts="0" description="File: GetMoldPlaceHolders">
            <results>
              <test-suite type="TestFixture" name="File: GetMoldPlaceHolders.Code Quality Check" executed="True" result="Failure" success="False" time="0.2236" asserts="0" description="File: GetMoldPlaceHolders.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: GetMoldPlaceHolders.Code Quality Check.is valid PowerShell Code" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: GetMoldPlaceHolders.Code Quality Check.passess ScriptAnalyzer" time="0.2117" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because The cmdlet 'Get-MoldPlaceHolders' uses a plural noun. A singular noun should be used instead., but got The cmdlet 'Get-MoldPlaceHolders' uses a plural noun. A singular noun should be used instead..</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: GetTemplatesFromPath" executed="True" result="Success" success="True" time="0.9645" asserts="0" description="File: GetTemplatesFromPath">
            <results>
              <test-suite type="TestFixture" name="File: GetTemplatesFromPath.Code Quality Check" executed="True" result="Success" success="True" time="0.1789" asserts="0" description="File: GetTemplatesFromPath.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: GetTemplatesFromPath.Code Quality Check.is valid PowerShell Code" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: GetTemplatesFromPath.Code Quality Check.passess ScriptAnalyzer" time="0.172" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: InvokeMoldScript" executed="True" result="Failure" success="False" time="1.0021" asserts="0" description="File: InvokeMoldScript">
            <results>
              <test-suite type="TestFixture" name="File: InvokeMoldScript.Code Quality Check" executed="True" result="Failure" success="False" time="0.032" asserts="0" description="File: InvokeMoldScript.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: InvokeMoldScript.Code Quality Check.is valid PowerShell Code" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: InvokeMoldScript.Code Quality Check.passess ScriptAnalyzer" time="0.0218" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because The parameter 'ScriptPath' has been declared but not used., but got The parameter 'ScriptPath' has been declared but not used. .</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: ReadAwesomeHost" executed="True" result="Success" success="True" time="1.2943" asserts="0" description="File: ReadAwesomeHost">
            <results>
              <test-suite type="TestFixture" name="File: ReadAwesomeHost.Code Quality Check" executed="True" result="Success" success="True" time="0.2889" asserts="0" description="File: ReadAwesomeHost.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: ReadAwesomeHost.Code Quality Check.is valid PowerShell Code" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: ReadAwesomeHost.Code Quality Check.passess ScriptAnalyzer" time="0.2802" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: TestMoldHealth" executed="True" result="Success" success="True" time="1.322" asserts="0" description="File: TestMoldHealth">
            <results>
              <test-suite type="TestFixture" name="File: TestMoldHealth.Code Quality Check" executed="True" result="Success" success="True" time="0.0228" asserts="0" description="File: TestMoldHealth.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: TestMoldHealth.Code Quality Check.is valid PowerShell Code" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: TestMoldHealth.Code Quality Check.passess ScriptAnalyzer" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: TestMoldStatus" executed="True" result="Success" success="True" time="1.3523" asserts="0" description="File: TestMoldStatus">
            <results>
              <test-suite type="TestFixture" name="File: TestMoldStatus.Code Quality Check" executed="True" result="Success" success="True" time="0.0259" asserts="0" description="File: TestMoldStatus.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: TestMoldStatus.Code Quality Check.is valid PowerShell Code" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: TestMoldStatus.Code Quality Check.passess ScriptAnalyzer" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: TestValidMoldManifestFile" executed="True" result="Success" success="True" time="1.383" asserts="0" description="File: TestValidMoldManifestFile">
            <results>
              <test-suite type="TestFixture" name="File: TestValidMoldManifestFile.Code Quality Check" executed="True" result="Success" success="True" time="0.0264" asserts="0" description="File: TestValidMoldManifestFile.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: TestValidMoldManifestFile.Code Quality Check.is valid PowerShell Code" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: TestValidMoldManifestFile.Code Quality Check.passess ScriptAnalyzer" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: ValidateAnswerFileParameters" executed="True" result="Failure" success="False" time="1.4051" asserts="0" description="File: ValidateAnswerFileParameters">
            <results>
              <test-suite type="TestFixture" name="File: ValidateAnswerFileParameters.Code Quality Check" executed="True" result="Failure" success="False" time="0.0185" asserts="0" description="File: ValidateAnswerFileParameters.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: ValidateAnswerFileParameters.Code Quality Check.is valid PowerShell Code" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: ValidateAnswerFileParameters.Code Quality Check.passess ScriptAnalyzer" time="0.0099" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because The cmdlet 'Test-ValidateAnswerFileParameters' uses a plural noun. A singular noun should be used instead., but got The cmdlet 'Test-ValidateAnswerFileParameters' uses a plural noun. A singular noun should be used instead..</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: GetMoldTemplate" executed="True" result="Success" success="True" time="1.5592" asserts="0" description="File: GetMoldTemplate">
            <results>
              <test-suite type="TestFixture" name="File: GetMoldTemplate.Code Quality Check" executed="True" result="Success" success="True" time="0.1502" asserts="0" description="File: GetMoldTemplate.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: GetMoldTemplate.Code Quality Check.is valid PowerShell Code" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: GetMoldTemplate.Code Quality Check.passess ScriptAnalyzer" time="0.1424" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: InvokeMold" executed="True" result="Success" success="True" time="2.2717" asserts="0" description="File: InvokeMold">
            <results>
              <test-suite type="TestFixture" name="File: InvokeMold.Code Quality Check" executed="True" result="Success" success="True" time="0.7087" asserts="0" description="File: InvokeMold.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: InvokeMold.Code Quality Check.is valid PowerShell Code" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: InvokeMold.Code Quality Check.passess ScriptAnalyzer" time="0.6959" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: New-MoldAnswerFile" executed="True" result="Failure" success="False" time="2.5207" asserts="0" description="File: New-MoldAnswerFile">
            <results>
              <test-suite type="TestFixture" name="File: New-MoldAnswerFile.Code Quality Check" executed="True" result="Failure" success="False" time="0.2441" asserts="0" description="File: New-MoldAnswerFile.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: New-MoldAnswerFile.Code Quality Check.is valid PowerShell Code" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: New-MoldAnswerFile.Code Quality Check.passess ScriptAnalyzer" time="0.2299" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because Function 'New-MoldAnswerFile' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'., but got Function 'New-MoldAnswerFile' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'..</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: NewMoldManifest" executed="True" result="Failure" success="False" time="2.9834" asserts="0" description="File: NewMoldManifest">
            <results>
              <test-suite type="TestFixture" name="File: NewMoldManifest.Code Quality Check" executed="True" result="Failure" success="False" time="0.4591" asserts="0" description="File: NewMoldManifest.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: NewMoldManifest.Code Quality Check.is valid PowerShell Code" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: NewMoldManifest.Code Quality Check.passess ScriptAnalyzer" time="0.4488" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because Function 'New-MoldManifest' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'., but got Function 'New-MoldManifest' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'..</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: TestMoldTemplate" executed="True" result="Failure" success="False" time="3.0257" asserts="0" description="File: TestMoldTemplate">
            <results>
              <test-suite type="TestFixture" name="File: TestMoldTemplate.Code Quality Check" executed="True" result="Failure" success="False" time="0.037" asserts="0" description="File: TestMoldTemplate.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: TestMoldTemplate.Code Quality Check.is valid PowerShell Code" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: TestMoldTemplate.Code Quality Check.passess ScriptAnalyzer" time="0.0204" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because The parameter 'TemplatePath' has been declared but not used., but got The parameter 'TemplatePath' has been declared but not used. .</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: UpdateMoldManifest" executed="True" result="Failure" success="False" time="3.2474" asserts="0" description="File: UpdateMoldManifest">
            <results>
              <test-suite type="TestFixture" name="File: UpdateMoldManifest.Code Quality Check" executed="True" result="Failure" success="False" time="0.2106" asserts="0" description="File: UpdateMoldManifest.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: UpdateMoldManifest.Code Quality Check.is valid PowerShell Code" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="passess ScriptAnalyzer" name="File: UpdateMoldManifest.Code Quality Check.passess ScriptAnalyzer" time="0.1961" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, because Function 'Update-MoldManifest' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'., but got Function 'Update-MoldManifest' has verb that could change system state. Therefore, the function has to support 'ShouldProcess'..</message>
                      <stack-trace>at $saResults | Should -BeNullOrEmpty -Because $($saResults.Message -join ';'), C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:21</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="File: Function" executed="True" result="Failure" success="False" time="3.4159" asserts="0" description="File: Function">
            <results>
              <test-suite type="TestFixture" name="File: Function.Code Quality Check" executed="True" result="Failure" success="False" time="0.1654" asserts="0" description="File: Function.Code Quality Check">
                <results>
                  <test-case description="is valid PowerShell Code" name="File: Function.Code Quality Check.is valid PowerShell Code" time="0.0077" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected 0, but got 1.</message>
                      <stack-trace>at $errors.Count | Should -Be 0, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:17
at &lt;ScriptBlock&gt;, C:\Localwork\Projects\Mold\tests\ScriptAnalyzer.Tests.ps1:17</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="passess ScriptAnalyzer" name="File: Function.Code Quality Check.passess ScriptAnalyzer" time="0.1545" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>